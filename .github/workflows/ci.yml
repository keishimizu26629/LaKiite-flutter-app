name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  FLUTTER_VERSION: "3.19.0"

jobs:
  # 並列実行で高速化
  analyze:
    name: Static Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Analyze project source
        run: flutter analyze --fatal-infos

      - name: Check formatting
        run: dart format --output=none --set-exit-if-changed .

  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: analyze

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Run unit tests with coverage
        run: flutter test --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          fail_ci_if_error: false
          verbose: true

  integration_tests:
    name: Integration Tests
    needs: [analyze, unit_tests]
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'run-integration-tests'))
    strategy:
      matrix:
        platform: [android, ios]
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Run integration tests (${{ matrix.platform }})
        run: |
          if [ "${{ matrix.platform }}" == "android" ]; then
            echo "Running Android integration tests..."
            # Android integration tests logic here
          else
            echo "Running iOS integration tests..."
            # iOS integration tests logic here
          fi

  build_verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: analyze

    strategy:
      matrix:
        platform: [apk, ios-no-codesign]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Build ${{ matrix.platform }}
        run: |
          if [ "${{ matrix.platform }}" == "apk" ]; then
            flutter build apk --debug
          else
            flutter build ios --debug --no-codesign
          fi

  # セキュリティチェック
  security_audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # 結果の集約
  ci_success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [analyze, unit_tests, build_verification, security_audit]
    if: always()

    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.analyze.result }}" == "success" &&
                "${{ needs.unit_tests.result }}" == "success" &&
                "${{ needs.build_verification.result }}" == "success" &&
                "${{ needs.security_audit.result }}" == "success" ]]; then
            echo "✅ All CI checks passed!"
          else
            echo "❌ Some CI checks failed."
            exit 1
          fi
