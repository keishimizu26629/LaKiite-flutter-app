import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter/foundation.dart';
import 'dart:io';
import '../../infrastructure/firebase/push_notification_service.dart';
import '../../utils/logger.dart';

/// „Éá„Éê„ÉÉ„Ç∞Áî®Ôºö„Éó„ÉÉ„Ç∑„É•ÈÄöÁü•„Éà„Éº„ÇØ„É≥Ë°®Á§∫„Éö„Éº„Ç∏
class DebugNotificationPage extends StatefulWidget {
  const DebugNotificationPage({super.key});

  @override
  State<DebugNotificationPage> createState() => _DebugNotificationPageState();
}

class _DebugNotificationPageState extends State<DebugNotificationPage> {
  String? _fcmToken;
  String? _apnsToken;
  bool _isLoading = false;
  bool _isSimulator = false;

  @override
  void initState() {
    super.initState();
    _checkEnvironment();
    _loadTokens();
  }

  /// ÂÆüË°åÁí∞Â¢É„Çí„ÉÅ„Çß„ÉÉ„ÇØ
  void _checkEnvironment() {
    if (kIsWeb) {
      _isSimulator = true;
      return;
    }

    try {
      if (Platform.isIOS) {
        _isSimulator = Platform.environment['SIMULATOR_DEVICE_NAME'] != null;
      } else if (Platform.isAndroid) {
        final model = Platform.environment['ANDROID_MODEL'] ?? '';
        final product = Platform.environment['ANDROID_PRODUCT'] ?? '';
        _isSimulator = model.toLowerCase().contains('sdk') ||
            product.toLowerCase().contains('sdk');
      }
    } catch (e) {
      _isSimulator = false;
    }
  }

  Future<void> _loadTokens() async {
    setState(() {
      _isLoading = true;
    });

    try {
      final pushService = PushNotificationService.instance;
      final token = await pushService.getAndDisplayToken();

      setState(() {
        _fcmToken = token;
      });
    } catch (e) {
      AppLogger.error('„Éà„Éº„ÇØ„É≥ÂèñÂæó„Ç®„É©„Éº: $e');
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _copyToClipboard(String text) async {
    await Clipboard.setData(ClipboardData(text: text));
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('„Éà„Éº„ÇØ„É≥„Çí„ÇØ„É™„ÉÉ„Éó„Éú„Éº„Éâ„Å´„Ç≥„Éî„Éº„Åó„Åæ„Åó„Åü')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('üêØ „Éó„ÉÉ„Ç∑„É•ÈÄöÁü•„Éá„Éê„ÉÉ„Ç∞'),
        backgroundColor: Colors.orange,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // Ë™¨Êòé
            Card(
              color: Colors.blue.shade50,
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(Icons.info, color: Colors.blue.shade700),
                        const SizedBox(width: 8),
                        Text(
                          'FCM„Éà„Éº„ÇØ„É≥„ÅÆÁ¢∫Ë™ç',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.blue.shade700,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    const Text(
                      'Firebase Console„Åã„Çâ„ÉÜ„Çπ„ÉàÈÄöÁü•„ÇíÈÄÅ‰ø°„Åô„Çã„Åü„ÇÅ„Å´ÂøÖË¶Å„Å™„Éà„Éº„ÇØ„É≥„ÇíË°®Á§∫„Åó„Åæ„Åô„ÄÇ',
                      style: TextStyle(fontSize: 14),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),

            // „Ç∑„Éü„É•„É¨„Éº„ÇøË≠¶Âëä
            if (_isSimulator)
              Card(
                color: Colors.orange.shade50,
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Icon(Icons.warning, color: Colors.orange.shade700),
                          const SizedBox(width: 8),
                          Text(
                            '„Ç∑„Éü„É•„É¨„Éº„ÇøÁí∞Â¢É„ÇíÊ§úÂá∫',
                            style: TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                              color: Colors.orange.shade700,
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 8),
                      const Text(
                        '„Ç∑„Éü„É•„É¨„Éº„Çø„Åß„ÅØ„Éó„ÉÉ„Ç∑„É•ÈÄöÁü•„ÅåÂà∂Èôê„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ\n'
                        'FCM„Éà„Éº„ÇØ„É≥„ÅÆÂèñÂæó„Å®„Éó„ÉÉ„Ç∑„É•ÈÄöÁü•„ÅÆ„ÉÜ„Çπ„Éà„Å´„ÅØÂÆüÊ©ü„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ',
                        style: TextStyle(fontSize: 14),
                      ),
                    ],
                  ),
                ),
              ),
            if (_isSimulator) const SizedBox(height: 16),

            // FCM„Éà„Éº„ÇØ„É≥Ë°®Á§∫
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        const Text(
                          'üêØ FCM „Éà„Éº„ÇØ„É≥',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const Spacer(),
                        if (_fcmToken != null)
                          IconButton(
                            icon: const Icon(Icons.copy),
                            onPressed: () => _copyToClipboard(_fcmToken!),
                            tooltip: '„Ç≥„Éî„Éº',
                          ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    Container(
                      width: double.infinity,
                      padding: const EdgeInsets.all(12),
                      decoration: BoxDecoration(
                        color: Colors.grey.shade100,
                        borderRadius: BorderRadius.circular(8),
                        border: Border.all(color: Colors.grey.shade300),
                      ),
                      child: _isLoading
                          ? const Center(
                              child: CircularProgressIndicator(),
                            )
                          : SelectableText(
                              _fcmToken ?? '„Éà„Éº„ÇØ„É≥„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü',
                              style: TextStyle(
                                fontFamily: 'monospace',
                                fontSize: 12,
                                color: _fcmToken != null
                                    ? Colors.black87
                                    : Colors.red,
                              ),
                            ),
                    ),
                  ],
                ),
              ),
            ),

            const SizedBox(height: 16),

            // Êõ¥Êñ∞„Éú„Çø„É≥
            ElevatedButton.icon(
              onPressed: _isLoading ? null : _loadTokens,
              icon: const Icon(Icons.refresh),
              label: const Text('„Éà„Éº„ÇØ„É≥„ÇíÊõ¥Êñ∞'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.orange,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(vertical: 12),
              ),
            ),

            const SizedBox(height: 24),

            // ‰ΩøÁî®ÊñπÊ≥ï„ÅÆË™¨Êòé
            Card(
              color: Colors.green.shade50,
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(Icons.help_outline, color: Colors.green.shade700),
                        const SizedBox(width: 8),
                        Text(
                          '„ÉÜ„Çπ„ÉàÈÄöÁü•„ÅÆÈÄÅ‰ø°ÊñπÊ≥ï',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                            color: Colors.green.shade700,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 12),
                    const Text(
                      '1. ‰∏äË®ò„ÅÆFCM„Éà„Éº„ÇØ„É≥„Çí„Ç≥„Éî„Éº\n'
                      '2. Firebase Console ‚Üí Cloud Messaging\n'
                      '3. "Send your first message" „Çí„ÇØ„É™„ÉÉ„ÇØ\n'
                      '4. ÈÄöÁü•ÂÜÖÂÆπ„ÇíÂÖ•Âäõ\n'
                      '5. "Send test message" „ÇíÈÅ∏Êäû\n'
                      '6. „Ç≥„Éî„Éº„Åó„Åü„Éà„Éº„ÇØ„É≥„ÇíË≤º„Çä‰ªò„Åë„Å¶ÈÄÅ‰ø°',
                      style: TextStyle(fontSize: 14),
                    ),
                    const SizedBox(height: 8),
                    Container(
                      padding: const EdgeInsets.all(8),
                      decoration: BoxDecoration(
                        color: Colors.amber.shade100,
                        borderRadius: BorderRadius.circular(4),
                      ),
                      child: const Row(
                        children: [
                          Icon(Icons.warning_amber,
                              color: Colors.amber, size: 16),
                          SizedBox(width: 8),
                          Expanded(
                            child: Text(
                              '„Ç¢„Éó„É™„Åå„Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„ÉâÁä∂ÊÖã„ÅÆÊôÇ„Å´ÈÄöÁü•„ÅåË°®Á§∫„Åï„Çå„Åæ„Åô',
                              style: TextStyle(fontSize: 12),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
